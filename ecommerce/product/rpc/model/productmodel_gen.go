// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFieldNames          = builder.RawFieldNames(&Product{}, true)
	productRows                = strings.Join(productFieldNames, ",")
	productRowsExpectAutoSet   = strings.Join(stringx.Remove(productFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	productRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(productFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicProductIdPrefix = "cache:public:product:id:"
)

type (
	productModel interface {
		Insert(ctx context.Context, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Product, error)
		Update(ctx context.Context, data *Product) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductModel struct {
		sqlc.CachedConn
		table string
	}

	Product struct {
		Id         int64     `db:"id"`
		Cateid     int64     `db:"cateid"`
		Name       string    `db:"name"`
		Subtitle   string    `db:"subtitle"`
		Images     string    `db:"images"`
		Detail     string    `db:"detail"`
		Price      int64     `db:"price"`
		Stock      int64     `db:"stock"`
		Status     int64     `db:"status"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newProductModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductModel {
	return &defaultProductModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."product"`,
	}
}

func (m *defaultProductModel) Delete(ctx context.Context, id int64) error {
	publicProductIdKey := fmt.Sprintf("%s%v", cachePublicProductIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicProductIdKey)
	return err
}

func (m *defaultProductModel) FindOne(ctx context.Context, id int64) (*Product, error) {
	publicProductIdKey := fmt.Sprintf("%s%v", cachePublicProductIdPrefix, id)
	var resp Product
	err := m.QueryRowCtx(ctx, &resp, publicProductIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", productRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
	publicProductIdKey := fmt.Sprintf("%s%v", cachePublicProductIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, productRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Cateid, data.Name, data.Subtitle, data.Images, data.Detail, data.Price, data.Stock, data.Status)
	}, publicProductIdKey)
	return ret, err
}

func (m *defaultProductModel) Update(ctx context.Context, data *Product) error {
	publicProductIdKey := fmt.Sprintf("%s%v", cachePublicProductIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, productRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Cateid, data.Name, data.Subtitle, data.Images, data.Detail, data.Price, data.Stock, data.Status)
	}, publicProductIdKey)
	return err
}

func (m *defaultProductModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicProductIdPrefix, primary)
}

func (m *defaultProductModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", productRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
