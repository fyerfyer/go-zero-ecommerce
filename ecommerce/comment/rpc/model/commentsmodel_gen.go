// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentsFieldNames          = builder.RawFieldNames(&Comments{}, true)
	commentsRows                = strings.Join(commentsFieldNames, ",")
	commentsRowsExpectAutoSet   = strings.Join(stringx.Remove(commentsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	commentsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(commentsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicCommentsIdPrefix = "cache:public:comments:id:"
)

type (
	commentsModel interface {
		Insert(ctx context.Context, data *Comments) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comments, error)
		Update(ctx context.Context, data *Comments) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCommentsModel struct {
		sqlc.CachedConn
		table string
	}

	Comments struct {
		Id          int64          `db:"id"`
		UserId      int64          `db:"user_id"`
		ProductId   int64          `db:"product_id"`
		OrderId     sql.NullString `db:"order_id"`
		Content     string         `db:"content"`
		CreatedTime time.Time      `db:"created_time"`
	}
)

func newCommentsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentsModel {
	return &defaultCommentsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."comments"`,
	}
}

func (m *defaultCommentsModel) Delete(ctx context.Context, id int64) error {
	publicCommentsIdKey := fmt.Sprintf("%s%v", cachePublicCommentsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicCommentsIdKey)
	return err
}

func (m *defaultCommentsModel) FindOne(ctx context.Context, id int64) (*Comments, error) {
	publicCommentsIdKey := fmt.Sprintf("%s%v", cachePublicCommentsIdPrefix, id)
	var resp Comments
	err := m.QueryRowCtx(ctx, &resp, publicCommentsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", commentsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentsModel) Insert(ctx context.Context, data *Comments) (sql.Result, error) {
	publicCommentsIdKey := fmt.Sprintf("%s%v", cachePublicCommentsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, commentsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProductId, data.OrderId, data.Content, data.CreatedTime)
	}, publicCommentsIdKey)
	return ret, err
}

func (m *defaultCommentsModel) Update(ctx context.Context, data *Comments) error {
	publicCommentsIdKey := fmt.Sprintf("%s%v", cachePublicCommentsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, commentsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.ProductId, data.OrderId, data.Content, data.CreatedTime)
	}, publicCommentsIdKey)
	return err
}

func (m *defaultCommentsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicCommentsIdPrefix, primary)
}

func (m *defaultCommentsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", commentsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentsModel) tableName() string {
	return m.table
}
