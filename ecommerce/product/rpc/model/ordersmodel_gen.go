// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{}, true)
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	ordersRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(ordersFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id string) error
	}

	defaultOrdersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Orders struct {
		Id          string    `db:"id"`
		Userid      int64     `db:"userid"`
		Shoppingid  int64     `db:"shoppingid"`
		Payment     int64     `db:"payment"`
		Paymenttype int64     `db:"paymenttype"`
		Postage     int64     `db:"postage"`
		Status      int64     `db:"status"`
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newOrdersModel(conn sqlx.SqlConn) *defaultOrdersModel {
	return &defaultOrdersModel{
		conn:  conn,
		table: `"public"."orders"`,
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id string) (*Orders, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", ordersRows, m.table)
	var resp Orders
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7)", m.table, ordersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Userid, data.Shoppingid, data.Payment, data.Paymenttype, data.Postage, data.Status)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, data *Orders) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, ordersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Userid, data.Shoppingid, data.Payment, data.Paymenttype, data.Postage, data.Status)
	return err
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
