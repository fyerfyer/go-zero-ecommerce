// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartItemsFieldNames          = builder.RawFieldNames(&CartItems{}, true)
	cartItemsRows                = strings.Join(cartItemsFieldNames, ",")
	cartItemsRowsExpectAutoSet   = strings.Join(stringx.Remove(cartItemsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	cartItemsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(cartItemsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicCartItemsIdPrefix = "cache:public:cartItems:id:"
)

type (
	cartItemsModel interface {
		Insert(ctx context.Context, data *CartItems) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CartItems, error)
		Update(ctx context.Context, data *CartItems) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCartItemsModel struct {
		sqlc.CachedConn
		table string
	}

	CartItems struct {
		Id          int64   `db:"id"`
		CartId      int64   `db:"cart_id"`
		ProductId   int64   `db:"product_id"`
		ProductName string  `db:"product_name"`
		Quantity    int64   `db:"quantity"`
		Price       float64 `db:"price"`
	}
)

func newCartItemsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCartItemsModel {
	return &defaultCartItemsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."cart_items"`,
	}
}

func (m *defaultCartItemsModel) Delete(ctx context.Context, id int64) error {
	publicCartItemsIdKey := fmt.Sprintf("%s%v", cachePublicCartItemsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicCartItemsIdKey)
	return err
}

func (m *defaultCartItemsModel) FindOne(ctx context.Context, id int64) (*CartItems, error) {
	publicCartItemsIdKey := fmt.Sprintf("%s%v", cachePublicCartItemsIdPrefix, id)
	var resp CartItems
	err := m.QueryRowCtx(ctx, &resp, publicCartItemsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", cartItemsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartItemsModel) Insert(ctx context.Context, data *CartItems) (sql.Result, error) {
	publicCartItemsIdKey := fmt.Sprintf("%s%v", cachePublicCartItemsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, cartItemsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CartId, data.ProductId, data.ProductName, data.Quantity, data.Price)
	}, publicCartItemsIdKey)
	return ret, err
}

func (m *defaultCartItemsModel) Update(ctx context.Context, data *CartItems) error {
	publicCartItemsIdKey := fmt.Sprintf("%s%v", cachePublicCartItemsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, cartItemsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.CartId, data.ProductId, data.ProductName, data.Quantity, data.Price)
	}, publicCartItemsIdKey)
	return err
}

func (m *defaultCartItemsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicCartItemsIdPrefix, primary)
}

func (m *defaultCartItemsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", cartItemsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCartItemsModel) tableName() string {
	return m.table
}
