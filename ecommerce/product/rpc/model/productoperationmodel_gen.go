// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productOperationFieldNames          = builder.RawFieldNames(&ProductOperation{}, true)
	productOperationRows                = strings.Join(productOperationFieldNames, ",")
	productOperationRowsExpectAutoSet   = strings.Join(stringx.Remove(productOperationFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	productOperationRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(productOperationFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	productOperationModel interface {
		Insert(ctx context.Context, data *ProductOperation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductOperation, error)
		Update(ctx context.Context, data *ProductOperation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductOperationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductOperation struct {
		Id         int64     `db:"id"`
		ProductId  int64     `db:"product_id"`
		Status     int64     `db:"status"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newProductOperationModel(conn sqlx.SqlConn) *defaultProductOperationModel {
	return &defaultProductOperationModel{
		conn:  conn,
		table: `"public"."product_operation"`,
	}
}

func (m *defaultProductOperationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductOperationModel) FindOne(ctx context.Context, id int64) (*ProductOperation, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", productOperationRows, m.table)
	var resp ProductOperation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductOperationModel) Insert(ctx context.Context, data *ProductOperation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2)", m.table, productOperationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.Status)
	return ret, err
}

func (m *defaultProductOperationModel) Update(ctx context.Context, data *ProductOperation) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, productOperationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.ProductId, data.Status)
	return err
}

func (m *defaultProductOperationModel) tableName() string {
	return m.table
}
