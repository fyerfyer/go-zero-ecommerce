// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderitemFieldNames          = builder.RawFieldNames(&Orderitem{}, true)
	orderitemRows                = strings.Join(orderitemFieldNames, ",")
	orderitemRowsExpectAutoSet   = strings.Join(stringx.Remove(orderitemFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	orderitemRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(orderitemFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	orderitemModel interface {
		Insert(ctx context.Context, data *Orderitem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Orderitem, error)
		Update(ctx context.Context, data *Orderitem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderitemModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Orderitem struct {
		Id           int64     `db:"id"`
		OrderId      string    `db:"order_id"`
		UserId       int64     `db:"user_id"`
		ProductId    int64     `db:"product_id"`
		ProductName  string    `db:"product_name"`
		ProductImage string    `db:"product_image"`
		CurrentPrice int64     `db:"current_price"`
		Quantity     int64     `db:"quantity"`
		TotalPrice   int64     `db:"total_price"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newOrderitemModel(conn sqlx.SqlConn) *defaultOrderitemModel {
	return &defaultOrderitemModel{
		conn:  conn,
		table: `"public"."orderitem"`,
	}
}

func (m *defaultOrderitemModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderitemModel) FindOne(ctx context.Context, id int64) (*Orderitem, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", orderitemRows, m.table)
	var resp Orderitem
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderitemModel) Insert(ctx context.Context, data *Orderitem) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, orderitemRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.UserId, data.ProductId, data.ProductName, data.ProductImage, data.CurrentPrice, data.Quantity, data.TotalPrice)
	return ret, err
}

func (m *defaultOrderitemModel) Update(ctx context.Context, data *Orderitem) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, orderitemRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.OrderId, data.UserId, data.ProductId, data.ProductName, data.ProductImage, data.CurrentPrice, data.Quantity, data.TotalPrice)
	return err
}

func (m *defaultOrderitemModel) tableName() string {
	return m.table
}
