// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_Login_FullMethodName                     = "/user.User/Login"
	User_GetUserInfo_FullMethodName               = "/user.User/GetUserInfo"
	User_AddUserReceiveAddress_FullMethodName     = "/user.User/AddUserReceiveAddress"
	User_EditUserReceiveAddress_FullMethodName    = "/user.User/EditUserReceiveAddress"
	User_DeleteUserReceiveAddress_FullMethodName  = "/user.User/DeleteUserReceiveAddress"
	User_GetUserReceiveAddressList_FullMethodName = "/user.User/GetUserReceiveAddressList"
	User_AddUserCollection_FullMethodName         = "/user.User/AddUserCollection"
	User_DeleteUserCollection_FullMethodName      = "/user.User/DeleteUserCollection"
	User_GetUserCollectionList_FullMethodName     = "/user.User/GetUserCollectionList"
	User_GetUserReceiveAddressInfo_FullMethodName = "/user.User/GetUserReceiveAddressInfo"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	AddUserReceiveAddress(ctx context.Context, in *AddUserReceiveAddressRequest, opts ...grpc.CallOption) (*AddUserReceiveAddressResponse, error)
	EditUserReceiveAddress(ctx context.Context, in *EditUserReceiveAddressRequest, opts ...grpc.CallOption) (*EditUserReceiveAddressResponse, error)
	DeleteUserReceiveAddress(ctx context.Context, in *DeleteUserReceiveAddressRequest, opts ...grpc.CallOption) (*DeleteUserReceiveAddressResponse, error)
	GetUserReceiveAddressList(ctx context.Context, in *GetUserReceiveAddressListRequest, opts ...grpc.CallOption) (*GetUserReceiveAddressListResponse, error)
	AddUserCollection(ctx context.Context, in *AddUserCollectionRequest, opts ...grpc.CallOption) (*AddUserCollectionResponse, error)
	DeleteUserCollection(ctx context.Context, in *DeleteUserCollectionRequest, opts ...grpc.CallOption) (*DeleteUserCollectionResponse, error)
	GetUserCollectionList(ctx context.Context, in *GetUserCollectionListRequest, opts ...grpc.CallOption) (*GetUserCollectionListResponse, error)
	GetUserReceiveAddressInfo(ctx context.Context, in *GetUserReceiveAddressInfoRequest, opts ...grpc.CallOption) (*UserReceiveAddress, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, User_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserReceiveAddress(ctx context.Context, in *AddUserReceiveAddressRequest, opts ...grpc.CallOption) (*AddUserReceiveAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserReceiveAddressResponse)
	err := c.cc.Invoke(ctx, User_AddUserReceiveAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditUserReceiveAddress(ctx context.Context, in *EditUserReceiveAddressRequest, opts ...grpc.CallOption) (*EditUserReceiveAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditUserReceiveAddressResponse)
	err := c.cc.Invoke(ctx, User_EditUserReceiveAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUserReceiveAddress(ctx context.Context, in *DeleteUserReceiveAddressRequest, opts ...grpc.CallOption) (*DeleteUserReceiveAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserReceiveAddressResponse)
	err := c.cc.Invoke(ctx, User_DeleteUserReceiveAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserReceiveAddressList(ctx context.Context, in *GetUserReceiveAddressListRequest, opts ...grpc.CallOption) (*GetUserReceiveAddressListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReceiveAddressListResponse)
	err := c.cc.Invoke(ctx, User_GetUserReceiveAddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserCollection(ctx context.Context, in *AddUserCollectionRequest, opts ...grpc.CallOption) (*AddUserCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserCollectionResponse)
	err := c.cc.Invoke(ctx, User_AddUserCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUserCollection(ctx context.Context, in *DeleteUserCollectionRequest, opts ...grpc.CallOption) (*DeleteUserCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserCollectionResponse)
	err := c.cc.Invoke(ctx, User_DeleteUserCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserCollectionList(ctx context.Context, in *GetUserCollectionListRequest, opts ...grpc.CallOption) (*GetUserCollectionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserCollectionListResponse)
	err := c.cc.Invoke(ctx, User_GetUserCollectionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserReceiveAddressInfo(ctx context.Context, in *GetUserReceiveAddressInfoRequest, opts ...grpc.CallOption) (*UserReceiveAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserReceiveAddress)
	err := c.cc.Invoke(ctx, User_GetUserReceiveAddressInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	AddUserReceiveAddress(context.Context, *AddUserReceiveAddressRequest) (*AddUserReceiveAddressResponse, error)
	EditUserReceiveAddress(context.Context, *EditUserReceiveAddressRequest) (*EditUserReceiveAddressResponse, error)
	DeleteUserReceiveAddress(context.Context, *DeleteUserReceiveAddressRequest) (*DeleteUserReceiveAddressResponse, error)
	GetUserReceiveAddressList(context.Context, *GetUserReceiveAddressListRequest) (*GetUserReceiveAddressListResponse, error)
	AddUserCollection(context.Context, *AddUserCollectionRequest) (*AddUserCollectionResponse, error)
	DeleteUserCollection(context.Context, *DeleteUserCollectionRequest) (*DeleteUserCollectionResponse, error)
	GetUserCollectionList(context.Context, *GetUserCollectionListRequest) (*GetUserCollectionListResponse, error)
	GetUserReceiveAddressInfo(context.Context, *GetUserReceiveAddressInfoRequest) (*UserReceiveAddress, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServer) AddUserReceiveAddress(context.Context, *AddUserReceiveAddressRequest) (*AddUserReceiveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserReceiveAddress not implemented")
}
func (UnimplementedUserServer) EditUserReceiveAddress(context.Context, *EditUserReceiveAddressRequest) (*EditUserReceiveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserReceiveAddress not implemented")
}
func (UnimplementedUserServer) DeleteUserReceiveAddress(context.Context, *DeleteUserReceiveAddressRequest) (*DeleteUserReceiveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserReceiveAddress not implemented")
}
func (UnimplementedUserServer) GetUserReceiveAddressList(context.Context, *GetUserReceiveAddressListRequest) (*GetUserReceiveAddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReceiveAddressList not implemented")
}
func (UnimplementedUserServer) AddUserCollection(context.Context, *AddUserCollectionRequest) (*AddUserCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserCollection not implemented")
}
func (UnimplementedUserServer) DeleteUserCollection(context.Context, *DeleteUserCollectionRequest) (*DeleteUserCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCollection not implemented")
}
func (UnimplementedUserServer) GetUserCollectionList(context.Context, *GetUserCollectionListRequest) (*GetUserCollectionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCollectionList not implemented")
}
func (UnimplementedUserServer) GetUserReceiveAddressInfo(context.Context, *GetUserReceiveAddressInfoRequest) (*UserReceiveAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReceiveAddressInfo not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReceiveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserReceiveAddress(ctx, req.(*AddUserReceiveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditUserReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserReceiveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditUserReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EditUserReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditUserReceiveAddress(ctx, req.(*EditUserReceiveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUserReceiveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReceiveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUserReceiveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteUserReceiveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUserReceiveAddress(ctx, req.(*DeleteUserReceiveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserReceiveAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReceiveAddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserReceiveAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserReceiveAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserReceiveAddressList(ctx, req.(*GetUserReceiveAddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserCollection(ctx, req.(*AddUserCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteUserCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUserCollection(ctx, req.(*DeleteUserCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCollectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserCollectionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserCollectionList(ctx, req.(*GetUserCollectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserReceiveAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReceiveAddressInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserReceiveAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserReceiveAddressInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserReceiveAddressInfo(ctx, req.(*GetUserReceiveAddressInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "AddUserReceiveAddress",
			Handler:    _User_AddUserReceiveAddress_Handler,
		},
		{
			MethodName: "EditUserReceiveAddress",
			Handler:    _User_EditUserReceiveAddress_Handler,
		},
		{
			MethodName: "DeleteUserReceiveAddress",
			Handler:    _User_DeleteUserReceiveAddress_Handler,
		},
		{
			MethodName: "GetUserReceiveAddressList",
			Handler:    _User_GetUserReceiveAddressList_Handler,
		},
		{
			MethodName: "AddUserCollection",
			Handler:    _User_AddUserCollection_Handler,
		},
		{
			MethodName: "DeleteUserCollection",
			Handler:    _User_DeleteUserCollection_Handler,
		},
		{
			MethodName: "GetUserCollectionList",
			Handler:    _User_GetUserCollectionList_Handler,
		},
		{
			MethodName: "GetUserReceiveAddressInfo",
			Handler:    _User_GetUserReceiveAddressInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
