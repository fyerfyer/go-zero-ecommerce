// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersCollectionFieldNames          = builder.RawFieldNames(&UsersCollection{}, true)
	usersCollectionRows                = strings.Join(usersCollectionFieldNames, ",")
	usersCollectionRowsExpectAutoSet   = strings.Join(stringx.Remove(usersCollectionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	usersCollectionRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(usersCollectionFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cachePublicUsersCollectionIdPrefix           = "cache:public:usersCollection:id:"
	cachePublicUsersCollectionUidProductIdPrefix = "cache:public:usersCollection:uid:productId:"
)

type (
	usersCollectionModel interface {
		Insert(ctx context.Context, data *UsersCollection) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UsersCollection, error)
		FindOneByUidProductId(ctx context.Context, uid int64, productId int64) (*UsersCollection, error)
		Update(ctx context.Context, data *UsersCollection) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersCollectionModel struct {
		sqlc.CachedConn
		table string
	}

	UsersCollection struct {
		Id         int64     `db:"id"`
		Uid        int64     `db:"uid"`
		ProductId  int64     `db:"product_id"`
		IsDelete   bool      `db:"is_delete"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newUsersCollectionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUsersCollectionModel {
	return &defaultUsersCollectionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."users_collection"`,
	}
}

func (m *defaultUsersCollectionModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicUsersCollectionIdKey := fmt.Sprintf("%s%v", cachePublicUsersCollectionIdPrefix, id)
	publicUsersCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cachePublicUsersCollectionUidProductIdPrefix, data.Uid, data.ProductId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicUsersCollectionIdKey, publicUsersCollectionUidProductIdKey)
	return err
}

func (m *defaultUsersCollectionModel) FindOne(ctx context.Context, id int64) (*UsersCollection, error) {
	publicUsersCollectionIdKey := fmt.Sprintf("%s%v", cachePublicUsersCollectionIdPrefix, id)
	var resp UsersCollection
	err := m.QueryRowCtx(ctx, &resp, publicUsersCollectionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", usersCollectionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersCollectionModel) FindOneByUidProductId(ctx context.Context, uid int64, productId int64) (*UsersCollection, error) {
	publicUsersCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cachePublicUsersCollectionUidProductIdPrefix, uid, productId)
	var resp UsersCollection
	err := m.QueryRowIndexCtx(ctx, &resp, publicUsersCollectionUidProductIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where uid = $1 and product_id = $2 limit 1", usersCollectionRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid, productId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersCollectionModel) Insert(ctx context.Context, data *UsersCollection) (sql.Result, error) {
	publicUsersCollectionIdKey := fmt.Sprintf("%s%v", cachePublicUsersCollectionIdPrefix, data.Id)
	publicUsersCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cachePublicUsersCollectionUidProductIdPrefix, data.Uid, data.ProductId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, usersCollectionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.ProductId, data.IsDelete)
	}, publicUsersCollectionIdKey, publicUsersCollectionUidProductIdKey)
	return ret, err
}

func (m *defaultUsersCollectionModel) Update(ctx context.Context, newData *UsersCollection) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	publicUsersCollectionIdKey := fmt.Sprintf("%s%v", cachePublicUsersCollectionIdPrefix, data.Id)
	publicUsersCollectionUidProductIdKey := fmt.Sprintf("%s%v:%v", cachePublicUsersCollectionUidProductIdPrefix, data.Uid, data.ProductId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, usersCollectionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.Uid, newData.ProductId, newData.IsDelete)
	}, publicUsersCollectionIdKey, publicUsersCollectionUidProductIdKey)
	return err
}

func (m *defaultUsersCollectionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicUsersCollectionIdPrefix, primary)
}

func (m *defaultUsersCollectionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", usersCollectionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsersCollectionModel) tableName() string {
	return m.table
}
